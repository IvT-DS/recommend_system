import streamlit as st
import numpy as np
import pandas as pd

df = pd.read_csv("kino_mail_proc.csv")
random_digits = np.random.choice(len(df), size=10, replace=False)


# –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
# title = st.text_input('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è?')

# if len(title) != 0:
#     st.header('–Ø –ø–æ–∫–∞ —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üò¨üò¨üò¨üò¨')


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
all_countries = set()
for countries_list in df["country"].dropna().str.split(", "):
    all_countries.update([country.strip() for country in countries_list])
all_countries = sorted(all_countries)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
all_genres = set()
for genres_list in df["genres"].dropna().str.split(", "):
    all_genres.update([genre.strip() for genre in genres_list])
all_genres = sorted(all_genres)

# –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
selected_country = st.sidebar.multiselect("–°—Ç—Ä–∞–Ω–∞", all_countries)
selected_genre = st.sidebar.multiselect("–ñ–∞–Ω—Ä—ã", all_genres)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ DataFrame
if selected_country:
    country_filters = "|".join([rf"\b{country}\b" for country in selected_country])
    df = df[df["country"].str.contains(country_filters, regex=True, na=False)]

if selected_genre:
    genre_filters = "|".join(selected_genre)
    df = df[df["genres"].str.contains(genre_filters, regex=True, na=False)]


if selected_genre:
    df = df[df["genres"].str.contains("|".join(selected_genre))]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame
if not df.empty:
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ year1 –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π
    df["year1"] = pd.to_numeric(df["year1"], errors="coerce")
    df = df.dropna(subset=["year1"])

    # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—â–µ–º min –∏ max
    min_year = int(df["year1"].min())
    max_year = int(df["year1"].max())

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –≥–æ–¥–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–∞–π–¥–µ—Ä
    if min_year < max_year:
        selected_year_range = st.sidebar.slider(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç –≤—ã–ø—É—Å–∫–∞",
            min_value=min_year,
            max_value=max_year,
            value=(min_year, max_year),
        )
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥–∞–º
        df = df[
            (df["year1"] >= selected_year_range[0])
            & (df["year1"] <= selected_year_range[1])
        ]
else:
    st.error(
        "–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
    )


if st.button("–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ") and len(df) > 0:
    random_indices = np.random.choice(df.index, size=min(10, len(df)), replace=False)
    for i in random_indices:
        col1, col2 = st.columns([1, 3])
        with col1:
            st.image(df["poster"][i])

        with col2:

            # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ loc –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º DataFrame
            title = df.loc[df.index == i, "title"].iloc[0]
            country = df.loc[df.index == i, "country"].iloc[0]
            year = df.loc[df.index == i, "year1"].iloc[0]
            genre = df.loc[df.index == i, "genres"].iloc[0]
            cast = df.loc[df.index == i, "cast1"].iloc[0]
            description = df.loc[df.index == i, "description"].iloc[0]

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª–µ–π –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
            st.markdown(
                f"<span style='font-weight:bold; font-size:22px;'>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞:</span> <span style='font-size:20px;'>¬´{title}¬ª</span>",
                unsafe_allow_html=True,
            )

            st.markdown(
                f"<span style='font-weight:bold; font-size:16px;'>–°—Ç—Ä–∞–Ω–∞:</span> <span style='font-size:16px;'>{country}</span>",
                unsafe_allow_html=True,
            )

            st.markdown(
                f"<span style='font-weight:bold; font-size:16px;'>–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</span> <span style='font-size:16px;'>{year}</span>",
                unsafe_allow_html=True,
            )

            # genre = f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" if pd.isna(df["genres"].iloc[i]) else df["genres"][i]

            st.markdown(
                f"<span style='font-weight:bold; font-size:16px;'>–ñ–∞–Ω—Ä:</span> <span style='font-size:16px;'>{genre}</span>",
                unsafe_allow_html=True,
            )

            st.markdown(
                "<h6 style='font-weight:bold;'>–í —Ä–æ–ª—è—Ö:</h6>", unsafe_allow_html=True
            )

            st.markdown(
                f"<div style='text-align: justify; margin-bottom: 18px;'>{cast}</div>",
                unsafe_allow_html=True,
            )

            st.markdown(
                "<h6 style='font-weight:bold;'>–û–ø–∏—Å–∞–Ω–∏–µ:</h6>", unsafe_allow_html=True
            )

            st.markdown(
                f"<div style='text-align: justify;'>{description}</div>",
                unsafe_allow_html=True,
            )

        st.markdown("---")
